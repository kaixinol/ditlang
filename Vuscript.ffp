#VisualFreeBasic_Project#  Version=5.6.8
NumObjects=3
ProjectName=Dust
CompilationMode=0
CompilationDebug=0
FunNameNumber=0
CharSet=1
CodePage=936
ProjectType=GUI
UseGDIPlus=0
ShowConsole=-1
MultiLanguage=0
OmitInformation=0
StartupIcon=30001.ico
UseWinXPthemes=0
StrUnicode=0
UseAdminPriv=0
DeleteGeneratedCode=0
AddCompOps= -gen gcc -O 0
LastRunFilename=Dust32.exe
ImageManager=30001.ico
ImageManager=
Major=1
Minor=5
Revision=5
Build=1020
FileMajor=1
FileMinor=5
FileRevision=5
FileBuild=1020
AutoIncrement=2
DefaultCompiler=32
Comments=
CompanyName=
FileDescription=Dit Preview A 
LegalCopyrights=
LegalTrademarks=
ProductName=

[Objects]

TopTab=#FF_WinMain#|True|0|323|11507
TopTab=#FF_AppStart#|False|0|18|1268
TopTab=#FF_PumpHook#|False|0|0|82
#END_MAIN_PROPERTIES#

































































































































































































































































































































































































[FF_APPSTART_START]
'这里是打开软件后最初被执行代码的地方，此时软件内部还未初始化。（注：一般情况EXE包含DLL的，DLL先于EXE执行DLL自己的起始代码）
' 不管是EXE还是DLL，都从这里开始执行，然后到【程序入口函数】执行，整个软件结束或DLL被卸载就执行【程序出口】过程。(这里的EXE、DLL表示自己程序)
' 一般情况在这里写 DLL 声明、自定义声明、常量和#Include的包含文件。由于很多初始化代码未执行，这里不建议写用户代码。
#define UNICODE                 '表示WIN的API默认使用 W系列，宽字符处理，如果删除（使用ASCII字符）会造成控件和API使用的代码编写方式，影响深远。
#lang "FB"                      '表示为标准FB格式    
#include Once "vbcompat.bi"     
#Include Once "crt/stdio.bi"
#define CR +vbcrlf
#define vStr 1
#define vDoub 2
#define vInte 3 
#define vStk 4
#define vEmp 0
#define __debug "on"
#define DBG (__debug="on")
#define __color_test__ "off"
#define DPrint(A) PC(4,"[DEBUG]"+(A))
#define TheLine Now_line(1)
#define Now_Line_ Now_line(0)
#define AsStack vString=Cast(String ptr,-1)
Type Bool2D
 IsLeft As BOOLEAN
 IsUsed As BOOLEAN=False
 RealDb As short
End Type
Type Str2D
str1 As String Ptr
str2 As String ptr
End Type
Type VarData
Vstring As String ptr
VDou As double
VInt As integer
Declare Function GetType ()As short
Declare Function GetData()As string
End type
Type Variable
#If DBG
Declare Sub PrintData ()
#endif
Declare Sub  SetData (vardata_ As VarData) 
Declare Function GetData ()As string
Declare Function GetType ()As short
Declare Sub ClearData( )
VName As String
VString As String ptr
VDou As Double
VInt As INTEGER
End type
Type Token
begin As Long=0
_end As long=0
End type
Type Stack
Declare Sub Push (argv As VarData) 
Declare Sub Pop () 
Declare Sub Init (ByVal num As short)
used(1) As ushort 
/'
used(1):Number of allocated memory space.
used(0):Number of used memory space.
To release the memory, only need to release 'used(0)' 
'/
place(any) As VarData ptr
End TYpe
Type Func
Argvs As Stack
LineBegin As short
LineEnd As Short
FuncName As String
Declare function GetArgv(num As uinteger) As VarData
End Type
Type FileA
Funcz(any) As Func
SharedVar(any) As Variable ptr
End type
function Func.GetArgv(num As uinteger) As VarData
return *this.Argvs.place(num)  
end function
Declare Operator = ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
Operator = ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
  Dim aq as short=0
  If a.vname=b.vname Then aq+=1
  If a.vstring=b.vstring Then aq+=1
  If a.vint = b.vint Then aq+=1
  If a.vdou =b.vdou Then aq+=1
  If a.gettype =b.gettype Then aq+=1
Return aq=5
End Operator
Declare Operator <> ( ByRef a As token, ByRef b As token ) As BOOLEAN
Operator <> ( ByRef a As token, ByRef b As token ) As BOOLEAN
If a.begin<>b.begin Or a._end<>b._end Then
 Return true
Else 
Return False
End if
End Operator
Declare Operator = ( ByRef a As token, ByRef b As token ) As BOOLEAN
Operator = ( ByRef a As token, ByRef b As token ) As BOOLEAN
If a.begin=b.begin and a._end=b._end Then
Return true
Else 
Return False
End if
End Operator
Declare Operator <> ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
Operator <> ( ByRef a As Variable, ByRef b As Variable ) As BOOLEAN
  If a.vname<>b.vname Then Return true
  If a.vstring<>b.vstring Then Return true
  If a.vint <> b.vint Then Return true
  If a.vdou <>b.vdou Then Return true
  If a.gettype <>b.gettype Then Return true
Return false
End Operator
Declare Operator = ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
Operator = ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
  Dim aq as short=0
  If a.vstring=b.vstring Then aq+=1
  If a.vint = b.vint Then aq+=1
  If a.vdou =b.vdou Then aq+=1
Return aq=3
End Operator
Declare Operator <> ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
Operator <> ( ByRef a As VarData, ByRef b As VarData ) As BOOLEAN
  If a.vstring<>b.vstring Then Return true
  If a.vint <> b.vint Then Return true
  If a.vdou <>b.vdou Then Return true
Return false
End Operator
sub Variable.ClearData ( )
   THIS.VNAME="[Unused]"
   Delete This.vstring
   This.vstring=NULL
   This.vint=0
   This.vdou=0
End sub

Function Variable.GetType ( )As SHORT
If this.VString<>NULL Then
Return vStr
ElseIf this.Vint<>0 Then
Return vInte
ElseIf this.Vdou<>0.0 Then
Return vDoub
Else
Return vEmp
End if
End Function
 
Function VarData.GetType ( )As SHORT
If this.VString<>(-1) And this.VString<>NULL Then
Return vStr
ElseIf this.VString=-1 THEN
Return vStk
ElseIf this.Vint<>0  Then
Return vInte
ElseIf this.Vdou<>0.0 Then
Return vDoub
else
Return vEmp
End if
End Function
#If DBG
function VarData.GetData()As string

   If This.gettype = vStr Then
      If This.vstring=NULL Then RETURN "" 
      return *(This.vstring) 'String
   End if
   If This.gettype = vDoub Then
      return str(This.vdou)'Double

   End if
   If This.gettype = vInte Then
      return str(This.vint)  'Integer
   End if
   If This.gettype = vStk Then
Dim iI as integer
Dim tmp as string
'DEBUG CODE:Print "USED="+Str( (*Cast(Stack ptr,(THIS.vint))).used(0) ) CR
  For  iI=1 To (*Cast(Stack ptr,(THIS.vint))).used(0)'Stack Datas
tmp+=(*(*Cast(Stack ptr,(THIS.vint))).place(iI).getdata)+","
  next
Return "{"+left(tmp,len(tmp)-1)+"}"
'去掉最后一个换行
   End if
    return "[Empty]" 'Empty
End function
#Endif
#If DBG
Sub Variable.PrintData()
      If Len(This.vname) = 0 Then
         This.vname="[Unused]"
      End if
   If This.gettype = vStr Then
      If Len(This.vname) = 0 Then
         printf "[Unused]::String->"+*(This.vstring)  + vbcrlf 'String
      else
         printf This.vname+ "::String->"+ *(This.vstring)  + vbcrlf 'String
      End if
      Exit sub
   End if
   If This.gettype = vStk Then
     printf This.vname + "::<Stack>"+ vbcrlf 'Stack
      Exit sub
   End if
   If This.gettype = vDoub Then
      printf This.vname + "::Double->" + str(This.vdou) + vbcrlf 'Double
      Exit sub
   End if
   If This.gettype = vInte Then
      printf This.vname + "::Integer->" + str(This.vint) + vbcrlf 'Integer
      Exit sub
   End if
   printf This.vname + "::Empty" + vbcrlf 'Empty
If This.vname = "[Unused]" Then
This.vname=""
End if
End Sub
#endif
function Variable.GetData()As string
   If This.gettype = vStr Then
      If This.vstring = NULL Then RETURN ""
      return * (This.vstring) 'String
   End if
   If This.gettype = vDoub Then
      return str(This.vdou) 'Double
      
   End if
   If This.gettype = vInte Then
      return str(This.vint) 'Integer
   End if
    If This.gettype = vStk Then
     ' return  'Stack
   End if       
   return "[Empty]" 'Empty
End function

SUB Variable.SetData(vardata_ As VarData) '***Set variable value
   this.VDou    = vardata_.VDou
   this.VInt    = vardata_.VInt
   this.VString = vardata_.VString
End SUB
'#inclib "GetToken"
'Extern "C++"
'Declare Sub match(sf As ZString Ptr,_data As Token ptr)
'End Extern   
Declare Function DUSTAPICALL Lib "WinAPICall" Alias "APICALL"(ZLNAME As String PTR ,D(any) As VARDATA PTR) As BOOLEAN
Declare SUB ver Lib "WinAPICall" Alias "DLLVER"()
sub Stack.Init(byval num As short)
   ReDim This.place(1 To num)
   This.used(1) = num '*** Set total value.
End sub
Sub Stack.Push(argv As VarData)
   Dim tmp as Short
   For tmp = 1 To used(1)
      If This.place(tmp) = NULL then
         This.place(tmp) = New VarData(argv)
         This.used(0) += 1
         Exit sub
      End If
   next
   
End sub
Sub Stack.Pop()
   Dim tmp as Short
   
   For tmp = 1 To used(0)
      
      If This.place(tmp) <> NULL then
         
         Delete( *This.place(tmp)).vstring
         
         Delete This.place(tmp)
         
         This.place(tmp) = null
      End If
      
   next
   
End sub






























[FF_APPSTART_END]
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































[FF_WINMAIN_START]
Dim Shared ScriptPath As string
Dim Shared Line_Data() As String
Dim Shared Now_line(2) As INTEGER
Function FF_WINMAIN(ByVal hInstance As HINSTANCE) As INT8 '***The beginning of the program
#if DBG
/'
#define TheLine Now_line(1)
#define Now_Line_ Now_line(0)
call <fx>,a
a->stack
fx<a>:
get a.x
get a.b
pop
end.
'/
'''Test1:测试GetFirst()
DPrint("FF_WINMAIN->Test1.Begin")
dim assd as str2d=GetFirst("'你好',ref")
Print(*assd.str1)
Print(*assd.str2)
DPrint("FF_WINMAIN->Test1.End")


'''Test2:测试GetStrToken()
DPrint("FF_WINMAIN->Test2.Begin")
Dim t(1 To CountChar("<><><><>>><<<>>>",60)) AS TOKEN
'match("(call(msgbox(Call(CStr(1))),16))",@T(0))
'printf STR(T(0).begin)+" "+STR(T(0)._end) CR
'printf STR(T(1).begin)+" "+STR(T(1)._end) CR
GetStrToken(t(),"<><><><>>><<<>>>")
DPrint("FF_WINMAIN->Test2.End")


'''Test3:测试变量系统
DPrint("FF_WINMAIN->Test3.Begin")
   Dim  As Variable a(-1 to 12)
   a(-1).VInt=12
   CreateVar(a(),"varname3")
   a(1).SetData(Parse("'hello?'"))
   a(1).PrintData
   a(1).ClearData
DPrint("FF_WINMAIN->Test3.End")


'''Test4:测试Stack类
DPrint("FF_WINMAIN->Test4.Begin")
   Dim f as VarData 
  Dim jk as Stack
jk.Init 10
jk.Push Parse("'Birds flying...'")
jk.Push Parse("123")
jk.Push Parse("456.1")
f.VInt=Cast(integer,@jk)
f.AsStack
DPrint("FF_WINMAIN->Test4.Parse.Begin")printf("f::<Stack>="+f.GetData)  CR
DPrint("FF_WINMAIN->Test4.Parse.End")
(*Cast(Stack ptr,f.VInt)).Pop
DPrint("FF_WINMAIN->Test4.Pop /OK/")
DPrint("FF_WINMAIN->Test4.End")
'''
'''Test5:测试是否能添加函数
DPrint("FF_WINMAIN->Test5.Begin")
redim Line_Data(1 To 10)
line_data(1)="main:"
line_data(2)="end."
line_data(3)="customfx:"
line_data(4)="hlt"
line_data(5)="int 2"
line_data(6)="end."
TheLine=6
LoadScript(1024)
REDIM Line_Data(0)
DPrint("FF_WINMAIN->Test5.End")
End
#endif
   Dim As BOOLEAN HelpMe ,WindowStay
   Dim varspace as Short = 1024
   Now_Line_ = 1
   dim i As short = 0 ,q as short
   #if __color_test__ = "on"
   #print "Color test, on..."
   For i = 0 To 15
      PC i ,"test " + Str(i)
   Next
   
   i = 0
   #endif
   ''' Output version information

   PC 10 ,"Vuscript 2.0  On win32[date:" + __DATE__ + " " + __TIME__ + "]" + vbcrlf + "If you wanna get more information ,please type ""--help"" for help."
   

   While len(Command(i)) <> 0
      i += 1
   wend
   i -= 1
   q = i
   If i < 2 And Command(1) <> "--help" And Command(1) <> "--v" and command(1) <> "--copyright" Then
      If q = 0 Then Goto HelpMessage
      PC 12 ,"Too few command line arguments or Invalid command line arguments "
      exit_( -1)
   ElseIf i > 4 then
      PC 12 ,"Too many command line arguments"
      exit_( -2)
   End If
   i = 1
   ''' Processing each command-line argument
   While len(Command(i)) <> 0
      if Command(i) = "-load" Then
         ScriptPath = Command(i + 1)
         if len(ScriptPath) < 3 then
            PC 12 ,"Invalid script path."
            exit_( -3)
         end if
      ElseIf Command(i) = "-stay" then
         WindowStay = true
      ElseIf Command(i) = "--help" then
         HelpMe = true
      ElseIf Command(i -1) <> "-load" And Command(i) <> "--v" And Command(i) <> "--copyright" And LEFT(Command(i) ,9) <> "-varspace" then
         
         PC 12 ,"Invalid command line arguments """ + Command(i) + """"
         exit_( -4)
      ElseIf Command(i) = "--v" then
         PC 3 ,"<build:520>"
         ver
         #if DBG
         DPrint("This Vuscript is a debug version!!")
         #endif
         exit_(0)
      ElseIf Command(i) = "--copyright" then
         PC 10 ,"Copyright (c) 2018-2020 znkzz<R.I.P> All rights reserved."
         PC 10 ,"Copyright (c) 2021 object-a All rights reserved."
        exit_(0)
      ElseIf LEFT(Command(i) ,9) = "-varspace" then
         Dim ret() as string
         Split(Command(i) ,"=" ,ret())
         varspace = cint(ret(2))
         ''' [Note]: the ret (0) is the string used to hold the array size.
         ''' [Note]: This is the difference from Visual Basic.
      End if
      
      i = i + 1
   wend
   GetLine_And_LoadLine
   if HelpMe = True Then
HelpMessage : 
      PC 3 ,"Use ""--help"" To get help."
      PC 3 ,"Use ""-stay"" let this window does not shut down after running."
      PC 3 ,"Use ""-load"" <scriptfile> to load vuscript file."
      PC 3 ,"Use ""--v"" to get  vuscript version messages."
      PC 3 ,"Use ""--copyright"" To get copyright messages."
      PC 3 ,"Use ""-varspace=<size>"" To set the varible zone size."
      exit_(1)
   End If

   #if DBG
   DPrint(vbtab + "FF_WINMAIN()->varspace=" + Str(varspace))
   #endif
   If  FileLEN(ScriptPath) =0  Then

      printf "can't find file:" + ScriptPath + ",and this program will stop.(EMPTY?)"
      Exit_(2)
   End if
   'LoadScript(varspace)
   if WindowStay = True Then
      getchar
   End If
   Function = false
End function
   
Sub FF_WINEND(ByVal hInstance As HINSTANCE) '***Check if the program exits properly
End Sub

Sub PC(cl2 As const integer, D AS const STRING = vbcrlf)   '***Outputs text of the specified color
  if cl2 > 15 Then
  SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), 7
   Exit sub
  End If
  SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), cl2
  printf  D+vbCrLf
 
  SetConsoleTextAttribute GetStdHandle(STD_OUTPUT_HANDLE), 7
End Sub
Sub LoadScript(size As const integer) '***Loading scripts
   #if DBG
      DPrint(vbtab + "LoadScript()->file=" + ScriptPath)
   #endif
#DEFINE DSTP(A) Print("[DEBUG]STOP HERE"+Str(A)+" "+Str(FF))  
   
    /'
   Add defined functions by scanning each row in turn.
   '/
   ''Begin
   Dim As uinteger FF,FF2 ,tmp_begin ,round
   
   Dim fxbox(any) as Func
   For FF = 1 to TheLine
      if Line_Data(FF) = "end." Then
         round += 1
      end if
   Next
   ReDim fxbox(1 to round)
   round = 0
   For FF = 1 to TheLine
      If right(Line_Data(FF) ,1) = ":" then
         ROUND                 += 1
         fxbox(ROUND).FuncName = Left(Line_Data(FF) ,Len(Line_Data(FF)) -1)
         fxbox(ROUND).LineBegin = FF
         For FF2=FF to TheLine
            If Line_Data(FF2) = "end." THEN
               fxbox(ROUND).LineEnd   = FF2
               Exit for
            End if
         Next
         FF=FF2
      End if
   next
   #If DBG
      DPrint("LoadScript()->FX1=" + fxbox(1).FuncName + ":" + Str(fxbox(1).LineBegin) + ":" + Str(fxbox(1).LineEnd))
      DPrint("LoadScript()->FX2=" + fxbox(2).FuncName + ":" + Str(fxbox(2).LineBegin) + ":" + Str(fxbox(2).LineEnd))
   #ENDIF
   
   ''End
End Sub
Sub GetLine_And_LoadLine() '***Reads the string for each line and records the total number of lines
   #if DBG
   DPrint(vbtab + "GetLine_And_LoadLine()->file="+ScriptPath)
   #endif
   Dim f As const Integer = FreeFile
   Open ScriptPath For Binary As #f
   TheLine = Split(Input(LOF(1), #1), vbCrLf, Line_Data())
   Close #f
End Sub
Sub CreateVar(zone() As Variable,varname As const string)'***Create a variable in zone() 
   #if DBG
   DPrint(vbtab + "CreateVar()->zone(-1).VInt="+Str(zone(-1).VInt))
   #endif
dim i as integer
''' [Note] Check for duplicate names 
For i=1 To zone(-1).VInt
if zone(i).VName =varname Then
   #if DBG
   DPrint(vbtab + "CreateVar()->Same Name:"+varname)
   exit_(3)
   #endif
End if
next

For i=1 To zone(-1).VInt
if zone(i)=zone(0) then
   zone(i).VName=varname
   #if DBG
   DPrint(vbtab + "CreateVar()->"+varname+vbtab+"OK!")
   #endif
Exit sub
End if
next
End sub
function GetVar(zone() As Variable,sname As string)As Variable '***get variable value 
Dim i as integer
For i=1 To zone(-1).VInt
if zone(i).VName=sname then
   #if DBG
   DPrint(vbtab + "GetVar()->"+sname+vbtab+"OK!")
   #endif
   Return zone(i)
End if
next
#if DBG
 DPrint(vbtab + "GetVar()->"+sname+vbtab+"Failed!")
#endif
End function
function Parse(obj As string)As VarData'**Parse String To VarData
If InStr(obj,"'")<>0 and InStrrev(obj,"'")<>0 then
Return Type<VarData>(New STRING(OBJ),0,0.0)
ElseIf InStr(obj,".")<>0  then
Return Type<vardata>(NULL,Val(obj),0)
ElseIf obj=str(cint(obj)) then
Return Type<vardata>(NULL,0.0,CInt(obj))
Else
Return Type<vardata>(NULL,0.0,0)
End if
End function
function ParseN(obj As string)As VarData'**Parse String To VarData
If InStr(obj,".")<>0  then
Return Type<vardata>(NULL,Val(obj),0)
ElseIf obj=str(cint(obj)) then
Return Type<vardata>(NULL,0.0,CInt(obj))
ElseIf Len(obj)<>0 THEN
Return Type<VarData>(New STRING(OBJ),0,0.0)
Else
Return Type<VarData>(NULL,0,0.0)

End if
End function
Function Evaluate(obj As string)As any ptr
'Empty
Return NULL
End function

Function GetFirst(str_ as string) as str2d '** Parser
   'mov 'f','f' **ERR
   'mov f,'q' **ERR
   'mov 'a',a  **ACCEPT
   'mov f,a **ACCEPT
   Dim i as Integer = 0
   dim d as Stack
   d.Init 4
   while i <> len(str_)
      If str_[i] = 39 then
         d.Push Type < VarData > (NULL ,0.0 ,i)
      End IF
      i += 1
   wend
   ' !place(0)||!place(1) ? NULL : New Str
   #define M(L) *D.place(L).VINT
   #define Argv1 iif(D.place(1) = NULL Or D.place(2) = NULL ,NULL ,NEW string(Mid(str_ ,M(1) + 1 ,M(2) - M(1) + 1)))
   #define Argv2 iif(D.place(2) = NULL Or D.place(3) = NULL ,NULL ,NEW string(Mid(str_ ,M(2) + 1 ,M(3) - M(2) + 1)))
   #define Argv3 iif(D.place(3) = NULL Or D.place(4) = NULL ,NULL ,NEW string(Mid(str_ ,M(3) + 1 ,M(4) - M(3) + 1)))
   /'
   #if DBG
      #define C(Q) sTR( *D.place(Q).VINT) + " "
      PrintA *Argv1 + "|" + *Argv2 + "|" + *Argv3
   #endif
   '/ 
   
   'Dim Argv1 as String Ptr=iif(D.place(0)=NULL Or D.place(1)=NULL,NULL,NEW  string(Mid(str_,*(D.place(0)).VINT,Len(str_)-*(D.place(1)).VINT+1)))
   'Dim Argv2 as String Ptr=iif(D.place(2)=NULL Or D.place(3)=NULL,NULL,NEW  string(Mid(str_,*(D.place(2)).VINT,Len(str_)-*(D.place(3)).VINT+1)))
   Dim b As Str2D = IIF(D.place(1) = NULL ,Type < STR2D > (New string(LEFT(STR_ ,InStr(STR_ ,",") -1)) ,New string(RIGHT(STR_ ,LEN(STR_) - InStr(STR_ ,",")))) ,Type < STR2D > (Argv1 ,iif(Argv3 = NULL ,new string(right(STR_ ,len(str_) - M(2) -2)) ,Argv3)))
   d.Pop
   Return b
End function

sub GetStrToken(tk() As Token ,Strdata As string)
'Dim ad(0 to 10) as token 
'match("fffff()()(())",@ad(0))
   ''Call <message>,<Xor 1,0>
   ''Call <message>,'<啊啊>'
   Dim qstack(1 to uBound(tk)*2) as Bool2D
   Dim as integer i ,i2 = 1
   dim STP_FLAG as BOOLEAN = false
   For i = 0 to Len(Strdata)
      
      if Strdata[i] = 39 Then
         STP_FLAG = (Not STP_FLAG)
         Continue for
      End if
      if Strdata[i] = 60 And STP_FLAG <> true Then
         qstack(i2).IsLeft = True
         qstack(i2).IsUsed = True
         DPrint(Str(qstack(i2).IsLeft) + "," + str(qstack(i2).IsUsed))
         qstack(i2).RealDb=i+1
         i2 += 1
      ElseIf Strdata[i] = 62 And STP_FLAG <> true Then
         qstack(i2).IsLeft = false
         qstack(i2).IsUsed = True
         DPrint(Str(qstack(i2).IsLeft) + "," + str(qstack(i2).IsUsed))
         qstack(i2).RealDb=i+1
         i2 += 1
      End if
   next
DPrint("qstack:"+Str(UBound(qstack)) )
  ReDim Preserve qstack(1 to i2-1)
#If DBG
Dim  d_i as integer
FOR d_i=1 to UBound(qstack)
DPrint(" Left:"+Str(qstack(d_i).IsLeft)+","+" Location:"+Str(qstack(d_i).RealDb))
Next
#endif
'''
'Dim dst as string
'#define BoolToTF(A) IIf(A=True,"T","F")
'FOR i=1 to UBound(qstack)

'Next
'DPrint(dst)
''Recursive search
End sub

Function CountChar(needcount As String,char As integer)As integer
Dim  as integer countInt,i
For i=0 to Len(needcount)
countInt+=IIf(needcount[i]=char,1,0)
next
Return countInt
End function























[FF_WINMAIN_END]
[FF_PUMPHOOK_START]
Function FF_PUMPHOOK( uMsg As Msg ) As Long
   Function = False  
End Function
[FF_PUMPHOOK_END]
